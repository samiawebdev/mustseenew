generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CastingInfos {
  MovieId      Int
  PersonId     Int
  RoleId       String?       @db.VarChar
  Movies       Movies        @relation(fields: [MovieId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "castinfostomovie_movie_FK")
  Persons      Persons       @relation(fields: [PersonId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "castinfostomovie_person_FK")
  CastingRoles CastingRoles? @relation(fields: [RoleId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "castinfostorole_role_FK")

  @@id([MovieId, PersonId])
}

model CastingRoles {
  Id           String         @id @db.VarChar
  CastingInfos CastingInfos[]
}

model Countries {
  Id             String           @id @db.VarChar
  Movietocountry Movietocountry[]
  Persons        Persons[]
}

model Genres {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(255)
  createdAt    DateTime       @db.Timestamptz(6)
  updatedAt    DateTime       @db.Timestamptz(6)
  Movietogenre Movietogenre[]
}

model MovieTypes {
  Id     String   @id @db.VarChar
  Movies Movies[]
}

model Movies {
  id             Int              @id @default(autoincrement())
  title          String?          @db.VarChar(255)
  productionYear Int?
  createdAt      DateTime         @db.Timestamptz(6)
  updatedAt      DateTime         @db.Timestamptz(6)
  PosterUrl      String?          @db.VarChar(2083)
  MovieType      String?          @db.VarChar
  TrailerLink    String?          @db.VarChar(2083)
  Synopsis       String?          @db.VarChar
  CastingInfos   CastingInfos[]
  Likes          Likes[]
  MovieTypes     MovieTypes?      @relation(fields: [MovieType], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "movietotype_movietype_FK")
  Movietocountry Movietocountry[]
  Movietogenre   Movietogenre[]
  Post           Post[]
}

model Movietocountry {
  Movieid   Int
  Countryid String    @db.VarChar
  Countries Countries @relation(fields: [Countryid], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "movietocountry_country_FK")
  Movies    Movies    @relation(fields: [Movieid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movietocountry_movie_FK")

  @@id([Movieid, Countryid])
}

model Movietogenre {
  Movieid Int
  Genreid Int
  Genres  Genres @relation(fields: [Genreid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movietogenre_genre_FK")
  Movies  Movies @relation(fields: [Movieid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movietogenre_movie_FK")

  @@id([Movieid, Genreid], map: "movietogenre_pkey")
}

model Persons {
  Id            Int            @id @default(autoincrement())
  Name          String?        @db.VarChar(255)
  Gender        String?        @db.VarChar(6)
  Birth_Country String?        @db.VarChar
  Birth_Year    String?        @db.VarChar(4)
  Death_Year    String?        @db.VarChar(4)
  CastingInfos  CastingInfos[]
  Countries     Countries?     @relation(fields: [Birth_Country], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "persontocountry_country_FK")
}

model UserRoles {
  Id          String        @id @db.VarChar(50)
  Usertoroles Usertoroles[]
}

model Usertoroles {
  UserRoleId String    @db.VarChar(50)
  UserId     String
  Id         BigInt    @id @default(autoincrement())
  UserRoles  UserRoles @relation(fields: [UserRoleId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "Usertoroles_UserRole_FK")
  Users      User      @relation(fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Usertoroles_User_FK")

  @@index([UserId], map: "fki_Usertoroles_User_FK")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  movieId     Int
  comment     String   @db.VarChar(1000)
  createdBy   User     @relation(fields: [createdById], references: [id])
  Movies      Movies   @relation(fields: [movieId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Post_movieId_FK")

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  userName      String        @db.VarChar(50)
  password      String        @db.VarChar
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?     @db.Timestamptz(6)
  accounts      Account[]
  Likes         Likes[]
  posts         Post[]
  sessions      Session[]
  Usertoroles   Usertoroles[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Likes {
  id      BigInt   @id @default(autoincrement())
  isLike  Boolean?
  userId  String
  movieId Int
  Movies  Movies   @relation(fields: [movieId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movieslike_movie_FK")
  User    User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userslike_user_FK")
}
